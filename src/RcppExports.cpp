// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// hourtodayCpp
NumericVector hourtodayCpp(NumericVector a, std::string fun);
RcppExport SEXP _mesoclim_hourtodayCpp(SEXP aSEXP, SEXP funSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< std::string >::type fun(funSEXP);
    rcpp_result_gen = Rcpp::wrap(hourtodayCpp(a, fun));
    return rcpp_result_gen;
END_RCPP
}
// populatematrix
IntegerMatrix populatematrix(IntegerMatrix m, std::string ij);
RcppExport SEXP _mesoclim_populatematrix(SEXP mSEXP, SEXP ijSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type m(mSEXP);
    Rcpp::traits::input_parameter< std::string >::type ij(ijSEXP);
    rcpp_result_gen = Rcpp::wrap(populatematrix(m, ij));
    return rcpp_result_gen;
END_RCPP
}
// juldayvCpp
IntegerVector juldayvCpp(IntegerVector year, IntegerVector month, IntegerVector day);
RcppExport SEXP _mesoclim_juldayvCpp(SEXP yearSEXP, SEXP monthSEXP, SEXP daySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type year(yearSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type month(monthSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type day(daySEXP);
    rcpp_result_gen = Rcpp::wrap(juldayvCpp(year, month, day));
    return rcpp_result_gen;
END_RCPP
}
// clearskyradmCpp
NumericMatrix clearskyradmCpp(std::vector<int> jd, std::vector<double> lt, std::vector<double> lat, std::vector<double> lon, bool hourly);
RcppExport SEXP _mesoclim_clearskyradmCpp(SEXP jdSEXP, SEXP ltSEXP, SEXP latSEXP, SEXP lonSEXP, SEXP hourlySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type jd(jdSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type lt(ltSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type lat(latSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type lon(lonSEXP);
    Rcpp::traits::input_parameter< bool >::type hourly(hourlySEXP);
    rcpp_result_gen = Rcpp::wrap(clearskyradmCpp(jd, lt, lat, lon, hourly));
    return rcpp_result_gen;
END_RCPP
}
// difpropmCpp
NumericMatrix difpropmCpp(NumericMatrix swrad, std::vector<int> jd, std::vector<double> lt, std::vector<double> lat, std::vector<double> lon);
RcppExport SEXP _mesoclim_difpropmCpp(SEXP swradSEXP, SEXP jdSEXP, SEXP ltSEXP, SEXP latSEXP, SEXP lonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type swrad(swradSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type jd(jdSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type lt(ltSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type lat(latSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type lon(lonSEXP);
    rcpp_result_gen = Rcpp::wrap(difpropmCpp(swrad, jd, lt, lat, lon));
    return rcpp_result_gen;
END_RCPP
}
// solzenmCpp
NumericMatrix solzenmCpp(std::vector<int> jd, std::vector<double> lt, std::vector<double> lat, std::vector<double> lon);
RcppExport SEXP _mesoclim_solzenmCpp(SEXP jdSEXP, SEXP ltSEXP, SEXP latSEXP, SEXP lonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type jd(jdSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type lt(ltSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type lat(latSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type lon(lonSEXP);
    rcpp_result_gen = Rcpp::wrap(solzenmCpp(jd, lt, lat, lon));
    return rcpp_result_gen;
END_RCPP
}
// hourlytempv
std::vector<double> hourlytempv(std::vector<double> tmn, std::vector<double> tmx, std::vector<int> year, std::vector<int> month, std::vector<int> day, double lat, double lon, double srte);
RcppExport SEXP _mesoclim_hourlytempv(SEXP tmnSEXP, SEXP tmxSEXP, SEXP yearSEXP, SEXP monthSEXP, SEXP daySEXP, SEXP latSEXP, SEXP lonSEXP, SEXP srteSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type tmn(tmnSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type tmx(tmxSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type year(yearSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type month(monthSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type day(daySEXP);
    Rcpp::traits::input_parameter< double >::type lat(latSEXP);
    Rcpp::traits::input_parameter< double >::type lon(lonSEXP);
    Rcpp::traits::input_parameter< double >::type srte(srteSEXP);
    rcpp_result_gen = Rcpp::wrap(hourlytempv(tmn, tmx, year, month, day, lat, lon, srte));
    return rcpp_result_gen;
END_RCPP
}
// hourlytempm
NumericMatrix hourlytempm(NumericMatrix tmn, NumericMatrix tmx, std::vector<int> year, std::vector<int> month, std::vector<int> day, std::vector<int> lat, std::vector<int> lon, double srte);
RcppExport SEXP _mesoclim_hourlytempm(SEXP tmnSEXP, SEXP tmxSEXP, SEXP yearSEXP, SEXP monthSEXP, SEXP daySEXP, SEXP latSEXP, SEXP lonSEXP, SEXP srteSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type tmn(tmnSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type tmx(tmxSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type year(yearSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type month(monthSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type day(daySEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type lat(latSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type lon(lonSEXP);
    Rcpp::traits::input_parameter< double >::type srte(srteSEXP);
    rcpp_result_gen = Rcpp::wrap(hourlytempm(tmn, tmx, year, month, day, lat, lon, srte));
    return rcpp_result_gen;
END_RCPP
}
// basinCpp
IntegerMatrix basinCpp(NumericMatrix& dm2, IntegerMatrix& bsn, IntegerMatrix& dun);
RcppExport SEXP _mesoclim_basinCpp(SEXP dm2SEXP, SEXP bsnSEXP, SEXP dunSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type dm2(dm2SEXP);
    Rcpp::traits::input_parameter< IntegerMatrix& >::type bsn(bsnSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix& >::type dun(dunSEXP);
    rcpp_result_gen = Rcpp::wrap(basinCpp(dm2, bsn, dun));
    return rcpp_result_gen;
END_RCPP
}
// renumberbasin
IntegerVector renumberbasin(IntegerVector& m, IntegerVector u);
RcppExport SEXP _mesoclim_renumberbasin(SEXP mSEXP, SEXP uSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector& >::type m(mSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type u(uSEXP);
    rcpp_result_gen = Rcpp::wrap(renumberbasin(m, u));
    return rcpp_result_gen;
END_RCPP
}
// invls_calc
NumericMatrix invls_calc(NumericMatrix lsm, double resolution, double xmin, double ymax, NumericVector s, int direction, NumericMatrix slr, double slr_xmin, double slr_xmax, double slr_ymin, double slr_ymax);
RcppExport SEXP _mesoclim_invls_calc(SEXP lsmSEXP, SEXP resolutionSEXP, SEXP xminSEXP, SEXP ymaxSEXP, SEXP sSEXP, SEXP directionSEXP, SEXP slrSEXP, SEXP slr_xminSEXP, SEXP slr_xmaxSEXP, SEXP slr_yminSEXP, SEXP slr_ymaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type lsm(lsmSEXP);
    Rcpp::traits::input_parameter< double >::type resolution(resolutionSEXP);
    Rcpp::traits::input_parameter< double >::type xmin(xminSEXP);
    Rcpp::traits::input_parameter< double >::type ymax(ymaxSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type s(sSEXP);
    Rcpp::traits::input_parameter< int >::type direction(directionSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type slr(slrSEXP);
    Rcpp::traits::input_parameter< double >::type slr_xmin(slr_xminSEXP);
    Rcpp::traits::input_parameter< double >::type slr_xmax(slr_xmaxSEXP);
    Rcpp::traits::input_parameter< double >::type slr_ymin(slr_yminSEXP);
    Rcpp::traits::input_parameter< double >::type slr_ymax(slr_ymaxSEXP);
    rcpp_result_gen = Rcpp::wrap(invls_calc(lsm, resolution, xmin, ymax, s, direction, slr, slr_xmin, slr_xmax, slr_ymin, slr_ymax));
    return rcpp_result_gen;
END_RCPP
}
// rainadjustv
std::vector<double> rainadjustv(std::vector<double> rain, std::vector<double> rrain, double rfrac, double rtot);
RcppExport SEXP _mesoclim_rainadjustv(SEXP rainSEXP, SEXP rrainSEXP, SEXP rfracSEXP, SEXP rtotSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type rain(rainSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type rrain(rrainSEXP);
    Rcpp::traits::input_parameter< double >::type rfrac(rfracSEXP);
    Rcpp::traits::input_parameter< double >::type rtot(rtotSEXP);
    rcpp_result_gen = Rcpp::wrap(rainadjustv(rain, rrain, rfrac, rtot));
    return rcpp_result_gen;
END_RCPP
}
// rainadjustm
NumericMatrix rainadjustm(NumericMatrix rainm, std::vector<double> rrain, std::vector<double> rfrac, std::vector<double> rtot);
RcppExport SEXP _mesoclim_rainadjustm(SEXP rainmSEXP, SEXP rrainSEXP, SEXP rfracSEXP, SEXP rtotSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type rainm(rainmSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type rrain(rrainSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type rfrac(rfracSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type rtot(rtotSEXP);
    rcpp_result_gen = Rcpp::wrap(rainadjustm(rainm, rrain, rfrac, rtot));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mesoclim_hourtodayCpp", (DL_FUNC) &_mesoclim_hourtodayCpp, 2},
    {"_mesoclim_populatematrix", (DL_FUNC) &_mesoclim_populatematrix, 2},
    {"_mesoclim_juldayvCpp", (DL_FUNC) &_mesoclim_juldayvCpp, 3},
    {"_mesoclim_clearskyradmCpp", (DL_FUNC) &_mesoclim_clearskyradmCpp, 5},
    {"_mesoclim_difpropmCpp", (DL_FUNC) &_mesoclim_difpropmCpp, 5},
    {"_mesoclim_solzenmCpp", (DL_FUNC) &_mesoclim_solzenmCpp, 4},
    {"_mesoclim_hourlytempv", (DL_FUNC) &_mesoclim_hourlytempv, 8},
    {"_mesoclim_hourlytempm", (DL_FUNC) &_mesoclim_hourlytempm, 8},
    {"_mesoclim_basinCpp", (DL_FUNC) &_mesoclim_basinCpp, 3},
    {"_mesoclim_renumberbasin", (DL_FUNC) &_mesoclim_renumberbasin, 2},
    {"_mesoclim_invls_calc", (DL_FUNC) &_mesoclim_invls_calc, 11},
    {"_mesoclim_rainadjustv", (DL_FUNC) &_mesoclim_rainadjustv, 4},
    {"_mesoclim_rainadjustm", (DL_FUNC) &_mesoclim_rainadjustm, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_mesoclim(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
