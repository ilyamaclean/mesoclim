% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/temporaldownscale.R
\name{hourlytemp}
\alias{hourlytemp}
\title{Derives hourly temperature from daily data}
\usage{
hourlytemp(tmn, tmx, tme = NA, lat = NA, long = NA, srte = 0.09)
}
\arguments{
\item{tmn}{a vector or SpatRaster of daily minimum temperatures (deg C)}

\item{tmx}{a vector or SpatRaster of daily maximum temperatures (deg C)}

\item{tme}{POSIXlt object of dates. Only required if \code{tmn} and
\code{tmx} are vectors.}

\item{lat}{latitude of location (decimal degrees). Only required if \code{tmn} and
\code{tmx} are vectors}

\item{srte}{a parameter controlling speed of decay of night time temperatures (see details)}

\item{lon}{longitude of location (decimal degrees). Only required if \code{tmn} and
\code{tmx} are vectors}
}
\description{
Generates a plausible vector or SpatRaster of hourly temperatures
from daily data.
}
\details{
Daytime temperatures are assumed to follow a sine curve with a peak a
short while after solar noon. After dusk, the temperatures are assumed to decay
exponentially reaching a minimum at dawn. The day in which tmx and tmn fall is
assumed to match UTC days. The parameter \code{stre} controls the speed of decay of
night time temperatures with time. A value of zero ensures values drop to minimum
at dawn the following day, but trial and error indicates in most circumstances
temperatures decay faster than this. The default value of 0.09 is an optimal
value derived using ERA5 data for western Europe, but performs reasonably well
globally
}
\examples{
tc<-mesoclim::era5data$climarray$temp
tme <- as.POSIXlt(c(0:30) * 3600 * 24, origin = "2018-05-01", tz = "UTC")
# ========================================================================= #
# ~~~~~~~~~~~~~~~~~~~~ input provided as vector =========================== #
# ========================================================================= #
# Derive tmx and tmn from hourly
tch <- apply(tc, 3, mean, na.rm = TRUE)
tcm <- matrix(tch, ncol = 24, byrow = TRUE)
tmn <- apply(tcm, 1, min)
tmx <- apply(tcm, 1, max)
# Use interpolation function
tcp <- hourlytemp(tmn, tmx, tme, 50, -5)
tmeh <- as.POSIXct(mesoclim::era5data$tme)
# Plot results to compare
plot(tch ~ tmeh, type="l", ylim = c(8, 18), xlab = "Date", ylab = "Temperature")
par(new = TRUE)
plot(tcp ~ tmeh, type="l", ylim = c(8, 18), col = "red", xlab = "", ylab = "")
# ========================================================================= #
# ~~~~~~~~~~~~~~~~~~~~ input provided as SpatRaster ======================= #
# ========================================================================= #
dtmc <- rast(mesoclim::era5data$dtmc)
# Derive tmx and tmn from hourly
tmn <- rast(hourtodayCpp(tc, "min"))
tmx <- rast(hourtodayCpp(tc, "max"))
Convert to SpatRaster
ext(tmn) <- ext(dtmc)
ext(tmx) <- ext(dtmc)
crs(tmn) <- crs(dtmc)
crs(tmx) <- crs(dtmc)
# Use interpolation function
tp <- hourlytemp(tmn, tmx, tme)
# Plot results to compare
tc <- rast(tc)
ext(tc) <- ext(tp)
crs(tc) <- crs(tc)
par(mfrow=c(2,1))
plot(tc[[i]])
plot(tp[[i]])
}
