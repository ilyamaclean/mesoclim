% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/temporaldownscale.R
\name{lw_dailytohourly}
\alias{lw_dailytohourly}
\title{Daily to hourly downward longwave radiation}
\usage{
lw_dailytohourly(lw, hrtemps, hrrh, hrpres, tme = NA, adjust = TRUE)
}
\arguments{
\item{lw}{\itemize{
\item an array of daily mean sky-emissivity values values (0-1)
}}

\item{hrtemps}{\itemize{
\item hourly temperature data for corresponding period as lw
}}

\item{hrrh}{\itemize{
\item hourly relative humidity data for corresponding period as lw
}}

\item{hrpres}{\itemize{
\item hourly atmospheric pressure data for corresponding period as lw
}}

\item{tme}{\itemize{
\item POSIXlt object of dates corresponding to radsw
}}

\item{adjust}{\itemize{
\item optional logical which if TRUE ensures that, after interpolation, returned
hourly values, when averaged to daily, match the input
}}

\item{dtm}{\itemize{
\item digital elevation spatraster
}}
}
\value{
an array of hourly downward long wave radiation
}
\description{
Derives an array or spatraster of hourly effective downward longwave radiation values.
}
\details{
Effective sky emissvity can be used to calaculate downward longwave radiation (Lwd).
The formula is Lwd = skyem * Lwu where Lwu is upward longwave radiation given
by Lwu=0.97\emph{5.67}10**-8*(tc+273.15). Here tc is average surface temperature (deg C))
but an adequate approximation is derived if substituted by air temperature.
TO DO - Option of providing cloud cover data to correct sky emissivity values??
}
\examples{
# ========================================================================= #
# ~~~~~~~~~~~~~~~~~~~~ input provided as SpatRaster ======================= #
# ========================================================================= #
hrtemps<-temp_dailytohourly(climdaily$tmin, climdaily$tmax, srte = 0.09)
hrpres<-pres_dailytohourly(climdaily$pres)
hrrh <- hum_dailytohourly(climdaily$relhum, climdaily$tmin, climdaily$tmax,hr_temp,climdaily$pres, hr_pres,relmin = 10)
lwdhr<-lw_dailytohourly(lw=climdaily$lwrad, hrtemps=hrtemps, hrrh=hrrh, hrpres=hrpres, adjust = TRUE)
cell_lw<-t(terra::extract(lwdhr,matrix(c(175000,40000),ncol=2)))
matplot(x=lubridate::as_datetime(terra::time(lwdhr)),y=cell_lw, type = "l", lty = 1)
# ========================================================================= #
# ~~~~~~~~~~~~~~~~~~~~ input provided as 3D array ======================= #
# ========================================================================= #
hrlw <- lw_dailytohourly(lw=mesoclim:::.is(climdaily$lwrad), hrtemps=mesoclim:::.is(hrtemps), hrrh=mesoclim:::.is(hrrh), hrpres=mesoclim:::.is(hrpres), tme=climdaily$tme,adjust = TRUE)
cell_lw<-hrlw[3,4,]
hr_tme<-as.POSIXlt(unlist(lapply(climdaily$tme,FUN=function(x) x+(60*60*c(0:23)) )))
matplot(x=as.numeric(hr_tme),y=cell_lw, type = "l", lty = 1)
# ========================================================================= #
# ~~~~~~~~~~~~~~~~~~~~ input provided as vector =========================== #
# ========================================================================= #
lw<-unlist(terra::global(climdaily$lwrad,mean))
hrt<-unlist(terra::global(hrtemps,mean))
hrp<-unlist(terra::global(hrpres,mean))
hrh<-unlist(terra::global(hrrh,mean))
tme<-as.POSIXlt(terra::time(climdaily$swrad))
hrlw <- lw_dailytohourly(lw=lw, hrtemps=hrt, hrrh=hrh, hrpres=hrp, tme=tme, adjust = TRUE)
hr_tme<-as.POSIXlt(unlist(lapply(tme,FUN=function(x) x+(60*60*c(0:23)) )))
# Plot results to compare
matplot(x=as.numeric(hr_tme),y=hrlw, type = "l", lty = 1)
}
\keyword{temporal}
